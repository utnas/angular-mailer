define("htmlbars-test-helpers",
  ["exports"],
  function(__exports__) {
    "use strict";
    function equalInnerHTML(fragment, html) {
      var actualHTML = normalizeInnerHTML(fragment.innerHTML);
      QUnit.push(actualHTML === html, actualHTML, html);
    }

    __exports__.equalInnerHTML = equalInnerHTML;function equalHTML(node, html) {
      var fragment;
      if (!node.nodeType && node.length) {
        fragment = document.createDocumentFragment();
        while (node[0]) {
          fragment.appendChild(node[0]);
        }
      } else {
        fragment = node;
      }

      var div = document.createElement("div");
      div.appendChild(fragment.cloneNode(true));

      equalInnerHTML(div, html);
    }

    __exports__.equalHTML = equalHTML;// detect weird IE8 html strings
    var ie8InnerHTMLTestElement = document.createElement('div');
    ie8InnerHTMLTestElement.setAttribute('id', 'womp');
    var ie8InnerHTML = (ie8InnerHTMLTestElement.outerHTML.indexOf('id=womp') > -1);

    // detect side-effects of cloning svg elements in IE9-11
    var ieSVGInnerHTML = (function () {
      if (!document.createElementNS) {
        return false;
      }
      var div = document.createElement('div');
      var node = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      div.appendChild(node);
      var clone = div.cloneNode(true);
      return clone.innerHTML === '<svg xmlns="http://www.w3.org/2000/svg" />';
    })();

    function normalizeInnerHTML(actualHTML) {
      if (ie8InnerHTML) {
        // drop newlines in IE8
        actualHTML = actualHTML.replace(/\r\n/gm, '');
        // downcase ALLCAPS tags in IE8
        actualHTML = actualHTML.replace(/<\/?[A-Z\-]+/gi, function(tag){
          return tag.toLowerCase();
        });
        // quote ids in IE8
        actualHTML = actualHTML.replace(/id=([^ >]+)/gi, function(match, id){
          return 'id="'+id+'"';
        });
        // IE8 adds ':' to some tags
        // <keygen> becomes <:keygen>
        actualHTML = actualHTML.replace(/<(\/?):([^ >]+)/gi, function(match, slash, tag){
          return '<'+slash+tag;
        });

        // Normalize the style attribute
        actualHTML = actualHTML.replace(/style="(.+?)"/gi, function(match, val){
          return 'style="'+val.toLowerCase()+';"';
        });

      }
      if (ieSVGInnerHTML) {
        // Replace `<svg xmlns="http://www.w3.org/2000/svg" height="50%" />` with `<svg height="50%"></svg>`, etc.
        // drop namespace attribute
        actualHTML = actualHTML.replace(/ xmlns="[^"]+"/, '');
        // replace self-closing elements
        actualHTML = actualHTML.replace(/<([^ >]+) [^\/>]*\/>/gi, function(tag, tagName) {
          return tag.slice(0, tag.length - 3) + '></' + tagName + '>';
        });
      }

      return actualHTML;
    }

    __exports__.normalizeInnerHTML = normalizeInnerHTML;// detect weird IE8 checked element string
    var checkedInput = document.createElement('input');
    checkedInput.setAttribute('checked', 'checked');
    var checkedInputString = checkedInput.outerHTML;
    function isCheckedInputHTML(element) {
      equal(element.outerHTML, checkedInputString);
    }

    __exports__.isCheckedInputHTML = isCheckedInputHTML;// check which property has the node's text content
    var textProperty = document.createElement('div').textContent === undefined ? 'innerText' : 'textContent';
    function getTextContent(el) {
      // textNode
      if (el.nodeType === 3) {
        return el.nodeValue;
      } else {
        return el[textProperty];
      }
    }

    __exports__.getTextContent = getTextContent;// IE8 does not have Object.create, so use a polyfill if needed.
    // Polyfill based on Mozilla's (MDN)
    function createObject(obj) {
      if (typeof Object.create === 'function') {
        return Object.create(obj);
      } else {
        var Temp = function() {};
        Temp.prototype = obj;
        return new Temp();
      }
    }
    __exports__.createObject = createObject;
  });
define("htmlbars-test-helpers.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - .');
    test('htmlbars-test-helpers.js should pass jshint', function() { 
      ok(true, 'htmlbars-test-helpers.js should pass jshint.'); 
    });
  });
define("htmlbars-util",
  ["./htmlbars-util/safe-string","./htmlbars-util/handlebars/utils","./htmlbars-util/namespaces","exports"],
  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {
    "use strict";
    var SafeString = __dependency1__["default"];
    var escapeExpression = __dependency2__.escapeExpression;
    var getAttrNamespace = __dependency3__.getAttrNamespace;

    __exports__.SafeString = SafeString;
    __exports__.escapeExpression = escapeExpression;
    __exports__.getAttrNamespace = getAttrNamespace;
  });
define("htmlbars-util.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - .');
    test('htmlbars-util.js should pass jshint', function() { 
      ok(true, 'htmlbars-util.js should pass jshint.'); 
    });
  });
define("htmlbars-util/array-utils",
  ["exports"],
  function(__exports__) {
    "use strict";
    function forEach(array, callback, binding) {
      var i, l;
      if (binding === undefined) {
        for (i = 0, l = array.length; i < l; i++) {
          callback(array[i], i, array);
        }
      } else {
        for (i = 0, l = array.length; i < l; i++) {
          callback.call(binding, array[i], i, array);
        }
      }
    }

    __exports__.forEach = forEach;function map(array, callback) {
      var output = [];
      var i, l;

      for (i = 0, l = array.length; i < l; i++) {
        output.push(callback(array[i], i, array));
      }

      return output;
    }

    __exports__.map = map;var getIdx;
    if (Array.prototype.indexOf) {
      getIdx = function(array, obj, from){
        return array.indexOf(obj, from);
      };
    } else {
      getIdx = function(array, obj, from) {
        if (from === undefined || from === null) {
          from = 0;
        } else if (from < 0) {
          from = Math.max(0, array.length + from);
        }
        for (var i = from, l= array.length; i < l; i++) {
          if (array[i] === obj) {
            return i;
          }
        }
        return -1;
      };
    }

    var indexOfArray = getIdx;
    __exports__.indexOfArray = indexOfArray;
  });
define("htmlbars-util/array-utils.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - htmlbars-util');
    test('htmlbars-util/array-utils.js should pass jshint', function() { 
      ok(true, 'htmlbars-util/array-utils.js should pass jshint.'); 
    });
  });
define("htmlbars-util/handlebars/safe-string",
  ["exports"],
  function(__exports__) {
    "use strict";
    // Build out our basic SafeString type
    function SafeString(string) {
      this.string = string;
    }

    SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
      return "" + this.string;
    };

    __exports__["default"] = SafeString;
  });
define("htmlbars-util/handlebars/safe-string.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - htmlbars-util/handlebars');
    test('htmlbars-util/handlebars/safe-string.js should pass jshint', function() { 
      ok(true, 'htmlbars-util/handlebars/safe-string.js should pass jshint.'); 
    });
  });
define("htmlbars-util/handlebars/utils",
  ["./safe-string","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    /*jshint -W004 */
    var SafeString = __dependency1__["default"];

    var escape = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#x27;",
      "`": "&#x60;"
    };

    var badChars = /[&<>"'`]/g;
    var possible = /[&<>"'`]/;

    function escapeChar(chr) {
      return escape[chr];
    }

    function extend(obj /* , ...source */) {
      for (var i = 1; i < arguments.length; i++) {
        for (var key in arguments[i]) {
          if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
            obj[key] = arguments[i][key];
          }
        }
      }

      return obj;
    }

    __exports__.extend = extend;var toString = Object.prototype.toString;
    __exports__.toString = toString;
    // Sourced from lodash
    // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
    var isFunction = function(value) {
      return typeof value === 'function';
    };
    // fallback for older versions of Chrome and Safari
    /* istanbul ignore next */
    if (isFunction(/x/)) {
      isFunction = function(value) {
        return typeof value === 'function' && toString.call(value) === '[object Function]';
      };
    }
    var isFunction;
    __exports__.isFunction = isFunction;
    /* istanbul ignore next */
    var isArray = Array.isArray || function(value) {
      return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;
    };
    __exports__.isArray = isArray;

    function escapeExpression(string) {
      // don't escape SafeStrings, since they're already safe
      if (string && string.toHTML) {
        return string.toHTML();
      } else if (string == null) {
        return "";
      } else if (!string) {
        return string + '';
      }

      // Force a string conversion as this will be done by the append regardless and
      // the regex test will do this transparently behind the scenes, causing issues if
      // an object's to string has escaped characters in it.
      string = "" + string;

      if(!possible.test(string)) { return string; }
      return string.replace(badChars, escapeChar);
    }

    __exports__.escapeExpression = escapeExpression;function isEmpty(value) {
      if (!value && value !== 0) {
        return true;
      } else if (isArray(value) && value.length === 0) {
        return true;
      } else {
        return false;
      }
    }

    __exports__.isEmpty = isEmpty;function appendContextPath(contextPath, id) {
      return (contextPath ? contextPath + '.' : '') + id;
    }

    __exports__.appendContextPath = appendContextPath;
  });
define("htmlbars-util/handlebars/utils.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - htmlbars-util/handlebars');
    test('htmlbars-util/handlebars/utils.js should pass jshint', function() { 
      ok(false, 'htmlbars-util/handlebars/utils.js should pass jshint.\nhtmlbars-util/handlebars/utils.js: line 58, col 23, Expected \'===\' and instead saw \'==\'.\nhtmlbars-util/handlebars/utils.js: line 2, col 8, \'SafeString\' is defined but never used.\n\n2 errors'); 
    });
  });
define("htmlbars-util/namespaces",
  ["exports"],
  function(__exports__) {
    "use strict";
    // ref http://dev.w3.org/html5/spec-LC/namespaces.html
    var defaultNamespaces = {
      html: 'http://www.w3.org/1999/xhtml',
      mathml: 'http://www.w3.org/1998/Math/MathML',
      svg: 'http://www.w3.org/2000/svg',
      xlink: 'http://www.w3.org/1999/xlink',
      xml: 'http://www.w3.org/XML/1998/namespace'
    };

    function getAttrNamespace(attrName) {
      var namespace;

      var colonIndex = attrName.indexOf(':');
      if (colonIndex !== -1) {
        var prefix = attrName.slice(0, colonIndex);
        namespace = defaultNamespaces[prefix];
      }

      return namespace || null;
    }

    __exports__.getAttrNamespace = getAttrNamespace;
  });
define("htmlbars-util/namespaces.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - htmlbars-util');
    test('htmlbars-util/namespaces.js should pass jshint', function() { 
      ok(true, 'htmlbars-util/namespaces.js should pass jshint.'); 
    });
  });
define("htmlbars-util/object-utils",
  ["exports"],
  function(__exports__) {
    "use strict";
    function merge(options, defaults) {
      for (var prop in defaults) {
        if (options.hasOwnProperty(prop)) { continue; }
        options[prop] = defaults[prop];
      }
      return options;
    }

    __exports__.merge = merge;
  });
define("htmlbars-util/object-utils.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - htmlbars-util');
    test('htmlbars-util/object-utils.js should pass jshint', function() { 
      ok(true, 'htmlbars-util/object-utils.js should pass jshint.'); 
    });
  });
define("htmlbars-util/quoting",
  ["exports"],
  function(__exports__) {
    "use strict";
    function escapeString(str) {
      str = str.replace(/\\/g, "\\\\");
      str = str.replace(/"/g, '\\"');
      str = str.replace(/\n/g, "\\n");
      return str;
    }

    __exports__.escapeString = escapeString;

    function string(str) {
      return '"' + escapeString(str) + '"';
    }

    __exports__.string = string;

    function array(a) {
      return "[" + a + "]";
    }

    __exports__.array = array;

    function hash(pairs) {
      return "{" + pairs.join(", ") + "}";
    }

    __exports__.hash = hash;function repeat(chars, times) {
      var str = "";
      while (times--) {
        str += chars;
      }
      return str;
    }

    __exports__.repeat = repeat;
  });
define("htmlbars-util/quoting.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - htmlbars-util');
    test('htmlbars-util/quoting.js should pass jshint', function() { 
      ok(true, 'htmlbars-util/quoting.js should pass jshint.'); 
    });
  });
define("htmlbars-util/safe-string",
  ["./handlebars/safe-string","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var SafeString = __dependency1__["default"];

    __exports__["default"] = SafeString;
  });
define("htmlbars-util/safe-string.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - htmlbars-util');
    test('htmlbars-util/safe-string.js should pass jshint', function() { 
      ok(true, 'htmlbars-util/safe-string.js should pass jshint.'); 
    });
  });
define("morph-attr-tests/attr-morph-test",
  ["../dom-helper","htmlbars-util/safe-string"],
  function(__dependency1__, __dependency2__) {
    "use strict";
    /* jshint scripturl:true */

    var DOMHelper = __dependency1__["default"];
    var SafeString = __dependency2__["default"];

    var svgNamespace = "http://www.w3.org/2000/svg",
        xlinkNamespace = "http://www.w3.org/1999/xlink";
    var domHelper = new DOMHelper();

    QUnit.module('AttrMorph');

    test("can update a dom node", function(){
      var element = domHelper.createElement('div');
      var morph = domHelper.createAttrMorph(element, 'id');
      morph.setContent('twang');
      equal(element.id, 'twang', 'id property is set');
      equal(element.getAttribute('id'), 'twang', 'id attribute is set');
    });

    test("can update property", function(){
      var element = domHelper.createElement('input');
      var morph = domHelper.createAttrMorph(element, 'disabled');
      morph.setContent(true);
      equal(element.disabled, true, 'disabled property is set');
      morph.setContent(false);
      equal(element.disabled, false, 'disabled property is set');
    });

    test("can update attribute", function(){
      var element = domHelper.createElement('div');
      var morph = domHelper.createAttrMorph(element, 'data-bop');
      morph.setContent('kpow');
      equal(element.getAttribute('data-bop'), 'kpow', 'data-bop attribute is set');
      morph.setContent(null);
      equal(element.getAttribute('data-bop'), undefined, 'data-bop attribute is removed');
    });

    test("can remove ns attribute with null", function(){
      var element = domHelper.createElement('svg');
      domHelper.setAttribute(element, 'xlink:title', 'Great Title', xlinkNamespace);
      var morph = domHelper.createAttrMorph(element, 'xlink:title', xlinkNamespace);
      morph.setContent(null);
      equal(element.getAttribute('xlink:title'), undefined, 'ns attribute is removed');
    });

    test("can remove attribute with undefined", function(){
      var element = domHelper.createElement('div');
      element.setAttribute('data-bop', 'kpow');
      var morph = domHelper.createAttrMorph(element, 'data-bop');
      morph.setContent(undefined);
      equal(element.getAttribute('data-bop'), undefined, 'data-bop attribute is removed');
    });

    test("can remove ns attribute with undefined", function(){
      var element = domHelper.createElement('svg');
      domHelper.setAttribute(element, 'xlink:title', 'Great Title', xlinkNamespace);
      var morph = domHelper.createAttrMorph(element, 'xlink:title', xlinkNamespace);
      morph.setContent(undefined);
      equal(element.getAttribute('xlink:title'), undefined, 'ns attribute is removed');
    });

    test("can update svg attribute", function(){
      domHelper.setNamespace(svgNamespace);
      var element = domHelper.createElement('svg');
      var morph = domHelper.createAttrMorph(element, 'height');
      morph.setContent('50%');
      equal(element.getAttribute('height'), '50%', 'svg attr is set');
      morph.setContent(null);
      equal(element.getAttribute('height'), undefined, 'svg attr is removed');
    });

    test("can update style attribute", function(){
      var element = domHelper.createElement('div');
      var morph = domHelper.createAttrMorph(element, 'style');
      morph.setContent('color: red;');
      // IE8 capitalizes css property names and removes trailing semicolons
      var value = element.getAttribute('style');
      value = value.toLowerCase();
      if (value.lastIndexOf(';') !== value.length - 1) {
        value += ';';
      }
      equal(value, 'color: red;', 'style attr is set');
      morph.setContent(null);
      equal(element.getAttribute('style'), undefined, 'style attr is removed');
    });

    var badTags = [
      { tag: 'a', attr: 'href' },
      { tag: 'body', attr: 'background' },
      { tag: 'link', attr: 'href' },
      { tag: 'img', attr: 'src' },
      { tag: 'iframe', attr: 'src' }
    ];

    for (var i=0, l=badTags.length; i<l; i++) {
      (function(){
        var subject = badTags[i];

        test(subject.tag +" "+subject.attr+" is sanitized when using blacklisted protocol", function() {
          var element = document.createElement(subject.tag);
          var morph = domHelper.createAttrMorph(element, subject.attr);
          morph.setContent('javascript://example.com');

          equal( element.getAttribute(subject.attr),
                'unsafe:javascript://example.com',
                'attribute is escaped');
        });

        test(subject.tag +" "+subject.attr+" is not sanitized when using non-whitelisted protocol with a SafeString", function() {
          var element = document.createElement(subject.tag);
          var morph = domHelper.createAttrMorph(element, subject.attr);
          try {
            morph.setContent(new SafeString('javascript://example.com'));

            equal( element.getAttribute(subject.attr),
                  'javascript://example.com',
                  'attribute is not escaped');
          } catch(e) {
            // IE does not allow javascript: to be set on img src
            ok(true, 'caught exception '+e);
          }
        });

        test(subject.tag +" "+subject.attr+" is not sanitized when using unsafe attr morph", function() {
          var element = document.createElement(subject.tag);
          var morph = domHelper.createUnsafeAttrMorph(element, subject.attr);
          try {
            morph.setContent('javascript://example.com');

            equal( element.getAttribute(subject.attr),
                  'javascript://example.com',
                  'attribute is not escaped');
          } catch(e) {
            // IE does not allow javascript: to be set on img src
            ok(true, 'caught exception '+e);
          }
        });

      })(); //jshint ignore:line
    }

    if (document && document.createElementNS) {

    test("detects attribute's namespace if it is not passed as an argument", function () {
      var element = domHelper.createElement('div');
      var morph = domHelper.createAttrMorph(element, 'xlink:href');
      morph.setContent('#circle');
      equal(element.attributes[0].namespaceURI, 'http://www.w3.org/1999/xlink', 'attribute has correct namespace');
    });

    test("can update namespaced attribute", function(){
      domHelper.setNamespace(svgNamespace);
      var element = domHelper.createElement('svg');
      var morph = domHelper.createAttrMorph(element, 'xlink:href', 'http://www.w3.org/1999/xlink');
      morph.setContent('#other');
      equal(element.getAttributeNS('http://www.w3.org/1999/xlink','href'), '#other', 'namespaced attr is set');
      equal(element.attributes[0].namespaceURI, 'http://www.w3.org/1999/xlink');
      equal(element.attributes[0].name, 'xlink:href');
      equal(element.attributes[0].localName, 'href');
      equal(element.attributes[0].value, '#other');
      morph.setContent(null);
      // safari returns '' while other browsers return undefined
      equal(!!element.getAttributeNS('http://www.w3.org/1999/xlink','href'), false, 'namespaced attr is removed');
    });

    }
  });
define("morph-attr-tests/attr-morph-test.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - morph-attr-tests');
    test('morph-attr-tests/attr-morph-test.js should pass jshint', function() { 
      ok(true, 'morph-attr-tests/attr-morph-test.js should pass jshint.'); 
    });
  });
define("morph-attr-tests/attr-morph/sanitize-attribute-value-test",
  ["morph-attr/sanitize-attribute-value","htmlbars-util/safe-string","../../dom-helper"],
  function(__dependency1__, __dependency2__, __dependency3__) {
    "use strict";
    var sanitizeAttributeValue = __dependency1__.sanitizeAttributeValue;
    var SafeString = __dependency2__["default"];

    var DOMHelper = __dependency3__["default"];

    var domHelper = new DOMHelper();

    QUnit.module('sanitizeAttributeValue(null, "href")');

    var goodProtocols = [ 'https', 'http', 'ftp', 'tel', 'file'];

    for (var i = 0, l = goodProtocols.length; i < l; i++) {
      buildProtocolTest(goodProtocols[i]);
    }

    function buildProtocolTest(protocol) {
      test('allows ' + protocol + ' protocol when element is not provided', function() {
        expect(1);

        var expected = protocol + '://foo.com';
        var actual = sanitizeAttributeValue(domHelper, null, 'href', expected);

        equal(actual, expected, 'protocol not escaped');
      });
    }

    test('blocks javascript: protocol', function() {
      /* jshint scripturl:true */

      expect(1);

      var expected = 'javascript:alert("foo")';
      var actual = sanitizeAttributeValue(domHelper, null, 'href', expected);

      equal(actual, 'unsafe:' + expected, 'protocol escaped');
    });

    test('blocks blacklisted protocols', function() {
      /* jshint scripturl:true */

      expect(1);

      var expected = 'javascript:alert("foo")';
      var actual = sanitizeAttributeValue(domHelper, null, 'href', expected);

      equal(actual, 'unsafe:' + expected, 'protocol escaped');
    });

    test('does not block SafeStrings', function() {
      /* jshint scripturl:true */

      expect(1);

      var expected = 'javascript:alert("foo")';
      var actual = sanitizeAttributeValue(domHelper, null, 'href', new SafeString(expected));

      equal(actual, expected, 'protocol unescaped');
    });
  });
define("morph-attr-tests/attr-morph/sanitize-attribute-value-test.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - morph-attr-tests/attr-morph');
    test('morph-attr-tests/attr-morph/sanitize-attribute-value-test.js should pass jshint', function() { 
      ok(true, 'morph-attr-tests/attr-morph/sanitize-attribute-value-test.js should pass jshint.'); 
    });
  });
define("morph-attr-tests/morph-attr.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - morph-attr-tests');
    test('morph-attr-tests/morph-attr.js should pass jshint', function() { 
      ok(true, 'morph-attr-tests/morph-attr.js should pass jshint.'); 
    });
  });
define("morph-attr-tests/morph-attr/sanitize-attribute-value.jshint",
  [],
  function() {
    "use strict";
    module('JSHint - morph-attr-tests/morph-attr');
    test('morph-attr-tests/morph-attr/sanitize-attribute-value.js should pass jshint', function() { 
      ok(true, 'morph-attr-tests/morph-attr/sanitize-attribute-value.js should pass jshint.'); 
    });
  });